{"version":3,"sources":["components/Block.tsx","reducer.ts","utils/cell.ts","utils/world.ts","components/Grid.tsx","hooks/useSimulation.ts","hooks/useInterval.ts","index.ts","components/App.tsx"],"names":["Block","_ref","on","onClick","showGridLines","styles","useMemo","backgroundColor","border","undefined","getStyles","react_default","a","createElement","role","style","ActionTypes","create","alive","arguments","length","randomize","world","size","Object","objectSpread","cells","map","Array","Cell","random","mapCells","callback","cell","index","step","_getCoordinatesForInd","x","y","Math","floor","getCoordinatesForIndex","getIndexForCooridinates","getNeighborsForIndex","reduce","acc","getNeighborhood","shouldLive","nextCell","toggleCell","slice","wrapAround","number","output","Grid","columns","display","gridTemplateColumns","concat","height","width","World","key","bind","initialState","playing","reducer","state","action","type","clear","data","toggleStart","useSimulation","delay","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","doClear","useCallback","doRandomize","doStep","doToggleCell","doToggleStart","running","callbackRef","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","ReactDOM","render","React","_useState","useState","_useState2","setShowGridLines","_useState3","_useState4","setDelay","_useSimulation","onChange","checked","min","max","e","Number","target","value","document","getElementById"],"mappings":"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","file":"static/js/main.a979854d.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  on: boolean,\n  onClick: () => void,\n  showGridLines: boolean,\n}\n\nexport default function Block({ on, onClick, showGridLines }: Props) {\n  const styles = useMemo(() => getStyles(on, showGridLines), [on, showGridLines]);\n  return <div onClick={onClick} role=\"button\" style={styles} />;\n}\n\nfunction getStyles(on: boolean, showGridLines: boolean) {\n  return {\n    backgroundColor: on ? 'whitesmoke' : 'black',\n    border: showGridLines ? '1px solid rebeccapurple' : undefined,\n  };\n}\n","import * as World from './utils/world';\n\nexport type Action = {\n  type: ActionTypes,\n  data?: any,\n}\n\nexport enum ActionTypes {\n  clear,\n  randomize,\n  step,\n  toggleCell,\n  toggleStart,\n}\n\nexport interface State {\n  world: World.Type,\n  playing: boolean,\n}\n\nexport const initialState = {\n  world: World.create(50),\n  playing: false,\n}\n\nexport default function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case ActionTypes.clear:\n      return initialState;\n    case ActionTypes.randomize:\n      return {\n        world: World.randomize(state.world),\n        playing: false,\n      };\n    case ActionTypes.step:\n      return {\n        ...state,\n        world: World.step(state.world),\n      };\n    case ActionTypes.toggleCell:\n      return {\n        world: World.toggleCell(state.world, action.data),\n        playing: false,\n      };\n    case ActionTypes.toggleStart:\n      return {\n        ...state,\n        playing: !state.playing,\n      }\n    default:\n      return state;\n  }\n}\n","interface Cell {\n  alive: 0 | 1;\n}\n\nexport type Type = Cell;\n\nexport function create(alive = false): Cell {\n  return {\n    alive: alive ? 1 : 0,\n  };\n}\n\nexport function toggle(cell: Cell): Cell {\n  return {\n    alive: cell.alive ? 0 : 1,\n  };\n}\n","import { map, random } from 'lodash';\nimport * as Cell from './cell';\n\ninterface World {\n  cells: Array<Cell.Type>,\n  size: number,\n}\n\nexport type Type = World;\n\n/**\n * Create a new, empty World.\n */\nexport function create(size: number): World {\n  return {\n    cells: map(new Array(size * size), () => Cell.create()),\n    size,\n  };\n}\n\n/**\n * Randomize the cells of a World. Returns a new World.\n */\nexport function randomize(world: World): World {\n  const { size } = world;\n  return {\n    ...world,\n    cells: map(new Array(size * size), () => Cell.create(!!random(1))),\n  };\n}\n\n/**\n * Execute a callback for every cell in a world, and return an array with the result of each.\n */\nexport function mapCells<T>(world: World, callback: (alive: boolean, index: number) => T) {\n  return world.cells.map((cell, index) => {\n    return callback(!!cell.alive, index);\n  });\n}\n\n/**\n * Return a new world with each cell in their \"next\" state.\n */\nexport function step(world: World): World {\n  return {\n    ...world,\n    cells: mapCells(world, (alive, index) => nextCell(world, alive, index)),\n  };\n}\n\n/**\n * Return a new world with a specific cell toggled.\n */\nexport function toggleCell(world: World, index: number): World {\n  const cells = world.cells.slice();\n  cells[index] = Cell.toggle(cells[index]);\n\n  return {\n    ...world,\n    cells,\n  };\n}\n\nfunction nextCell(world: World, alive: boolean, index: number): Cell.Type {\n  return Cell.create(shouldLive(world, alive, index));\n}\n\nfunction shouldLive(world: World, alive: boolean, index: number): boolean {\n  const liveNeibhbors = getNeighborhood(world, index);\n\n  switch (liveNeibhbors) {\n    case 0:\n    case 1:\n      return false;\n    case 2:\n      return alive;\n    case 3:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getNeighborhood(world: World, index: number): number {\n  return getNeighborsForIndex(world, index).reduce((acc, cell) => acc + cell.alive, 0);\n}\n\nfunction getNeighborsForIndex(world: World, index: number): Array<Cell.Type> {\n  const { x, y } = getCoordinatesForIndex(world, index);\n\n  return [\n    world.cells[getIndexForCooridinates(world, x - 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x, y + 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x - 1, y)],\n    world.cells[getIndexForCooridinates(world, x + 1, y)],\n    world.cells[getIndexForCooridinates(world, x - 1, y - 1)],\n    world.cells[getIndexForCooridinates(world, x, y - 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y - 1)],\n  ];\n}\n\nfunction getCoordinatesForIndex(world: World, index: number): { x: number, y: number } {\n  return {\n    x: index % world.size,\n    y: Math.floor(index / world.size),\n  };\n}\n\nfunction getIndexForCooridinates(world: World, x: number, y: number): number {\n  return wrapAround(x, world.size) + wrapAround(y, world.size) * world.size;\n}\n\nfunction wrapAround(number: number, size: number): number {\n  let output = number;\n\n  if (output < 0) {\n    output = size - 1;\n  } else if (output >= size) {\n    output = 0;\n  }\n\n  return output;\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as World from '../utils/world';\n\ntype Props = {\n  onClick: (index: number) => void,\n  showGridLines: boolean,\n  world: World.Type,\n}\n\nexport default function Grid({ onClick, showGridLines, world }: Props) {\n  const styles = useMemo(() => getStyles(world.size), [world.size])\n\n  return (\n    <div style={styles}>\n      {World.mapCells(world, (alive, index) => {\n        return (\n          <Block\n            key={`${index}-${alive}`}\n            on={alive}\n            onClick={onClick.bind(null, index)}\n            showGridLines={showGridLines}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number) {\n  return {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: 600,\n    width: 600,\n  };\n}\n","import { useCallback, useReducer } from 'react';\nimport reducer, { ActionTypes, initialState } from '../reducer';\nimport useInterval from './useInterval';\n\nexport default function useSimulation(delay: number) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const doClear = useCallback(() => dispatch({ type: ActionTypes.clear }), []);\n  const doRandomize = useCallback(() => dispatch({ type: ActionTypes.randomize }), []);\n  const doStep = useCallback(() => dispatch({ type: ActionTypes.step }), []);\n  const doToggleCell = useCallback((index) => dispatch({ type: ActionTypes.toggleCell, data: index }), []);\n  const doToggleStart = useCallback(() => dispatch({ type: ActionTypes.toggleStart }), []);\n\n  useInterval(doStep, delay, state.playing);\n\n  return {\n    world: state.world,\n    playing: state.playing,\n    doClear,\n    doRandomize,\n    doStep,\n    doToggleCell,\n    doToggleStart,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number, running = true) {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (running) {\n      const id = setInterval(callbackRef.current, delay);\n\n      return () => clearInterval(id);\n    }\n  }, [delay, callbackRef, running]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React, { useState } from 'react';\nimport Grid from './Grid';\nimport useSimulation from '../hooks/useSimulation';\n\nexport default function App() {\n  const [showGridLines, setShowGridLines] = useState(true);\n  const [delay, setDelay] = useState(50);\n  const { world, playing, doClear, doRandomize, doStep, doToggleCell, doToggleStart } = useSimulation(delay);\n\n  return (\n    <div>\n      <button onClick={doStep}>Step</button>\n      <button onClick={doToggleStart}>{playing ? 'Stop' : 'Play'}</button>\n      <button onClick={doClear}>Clear</button>\n      <button onClick={doRandomize}>Random</button>\n      <label>\n        Show grid lines:\n        <input type=\"checkbox\" onChange={() => setShowGridLines(state => !state)} checked={showGridLines} />\n      </label>\n      <label>\n        Delay:\n        <input type=\"range\" min=\"50\" max=\"500\" step=\"50\" onChange={(e) => setDelay(Number(e.target.value))} value={delay} />\n      </label>\n      <Grid onClick={doToggleCell} showGridLines={showGridLines} world={world} />\n    </div>\n  );\n}\n"],"sourceRoot":""}