{"version":3,"sources":["components/Block.tsx","utils/cell.ts","utils/world.ts","components/Grid.tsx","reducer.ts","hooks/useSimulation.ts","hooks/useInterval.ts","components/App.tsx","index.ts"],"names":["Block","_ref","on","onClick","styles","useMemo","backgroundColor","border","getStyles","react_default","a","createElement","role","style","create","alive","arguments","length","undefined","randomize","world","size","_objectSpread","cells","map","Array","Cell","random","mapCells","callback","cell","index","step","_getCoordinatesForInd","x","y","Math","floor","getCoordinatesForIndex","getIndexForCooridinates","getNeighborsForIndex","reduce","acc","getNeighborhood","shouldLive","nextCell","toggleCell","slice","wrapAround","number","output","Grid","columns","display","gridTemplateColumns","concat","height","width","World","bind","key","ActionTypes","initialState","playing","reducer","state","action","type","clear","reducer_objectSpread","data","toggleStart","useSimulation","speed","_useReducer","useReducer","_useReducer2","Object","slicedToArray","dispatch","doClear","useCallback","doRandomize","doStep","doToggleCell","doToggleStart","delay","running","callbackRef","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","simulationSpeed","ReactDOM","render","React","_useSimulation","document","getElementById"],"mappings":"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","file":"static/js/main.9d44d070.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  on: boolean,\n  onClick: () => void,\n}\n\nexport default function Block({ on, onClick }: Props) {\n  const styles = useMemo(() => getStyles(on), [on]);\n  return <div onClick={onClick} role=\"button\" style={styles} />;\n}\n\nfunction getStyles(on: boolean) {\n  return {\n    backgroundColor: on ? 'whitesmoke' : 'black',\n    border: '1px solid rebeccapurple',\n  };\n}\n","interface Cell {\n  alive: 0 | 1;\n}\n\nexport type Type = Cell;\n\nexport function create(alive = false): Cell {\n  return {\n    alive: alive ? 1 : 0,\n  };\n}\n\nexport function toggle(cell: Cell): Cell {\n  return {\n    alive: cell.alive ? 0 : 1,\n  };\n}\n","import { map, random } from 'lodash';\nimport * as Cell from './cell';\n\ninterface World {\n  cells: Array<Cell.Type>,\n  size: number,\n}\n\nexport type Type = World;\n\n/**\n * Create a new, empty World.\n */\nexport function create(size: number): World {\n  return {\n    cells: map(new Array(size * size), () => Cell.create()),\n    size,\n  };\n}\n\n/**\n * Randomize the cells of a World. Returns a new World.\n */\nexport function randomize(world: World): World {\n  const { size } = world;\n  return {\n    ...world,\n    cells: map(new Array(size * size), () => Cell.create(!!random(1))),\n  };\n}\n\n/**\n * Execute a callback for every cell in a world, and return an array with the result of each.\n */\nexport function mapCells<T>(world: World, callback: (alive: boolean, index: number) => T) {\n  return world.cells.map((cell, index) => {\n    return callback(!!cell.alive, index);\n  });\n}\n\n/**\n * Return a new world with each cell in their \"next\" state.\n */\nexport function step(world: World): World {\n  return {\n    ...world,\n    cells: mapCells(world, (alive, index) => nextCell(world, alive, index)),\n  };\n}\n\n/**\n * Return a new world with a specific cell toggled.\n */\nexport function toggleCell(world: World, index: number): World {\n  const cells = world.cells.slice();\n  cells[index] = Cell.toggle(cells[index]);\n\n  return {\n    ...world,\n    cells,\n  };\n}\n\nfunction nextCell(world: World, alive: boolean, index: number): Cell.Type {\n  return Cell.create(shouldLive(world, alive, index));\n}\n\nfunction shouldLive(world: World, alive: boolean, index: number): boolean {\n  const liveNeibhbors = getNeighborhood(world, index);\n\n  switch (liveNeibhbors) {\n    case 0:\n    case 1:\n      return false;\n    case 2:\n      return alive;\n    case 3:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getNeighborhood(world: World, index: number): number {\n  return getNeighborsForIndex(world, index).reduce((acc, cell) => acc + cell.alive, 0);\n}\n\nfunction getNeighborsForIndex(world: World, index: number): Array<Cell.Type> {\n  const { x, y } = getCoordinatesForIndex(world, index);\n\n  return [\n    world.cells[getIndexForCooridinates(world, x - 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x, y + 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x - 1, y)],\n    world.cells[getIndexForCooridinates(world, x + 1, y)],\n    world.cells[getIndexForCooridinates(world, x - 1, y - 1)],\n    world.cells[getIndexForCooridinates(world, x, y - 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y - 1)],\n  ];\n}\n\nfunction getCoordinatesForIndex(world: World, index: number): { x: number, y: number } {\n  return {\n    x: index % world.size,\n    y: Math.floor(index / world.size),\n  };\n}\n\nfunction getIndexForCooridinates(world: World, x: number, y: number): number {\n  return wrapAround(x, world.size) + wrapAround(y, world.size) * world.size;\n}\n\nfunction wrapAround(number: number, size: number): number {\n  let output = number;\n\n  if (output < 0) {\n    output = size - 1;\n  } else if (output >= size) {\n    output = 0;\n  }\n\n  return output;\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as World from '../utils/world';\n\ntype Props = {\n  onClick: (index: number) => void,\n  world: World.Type,\n}\n\nexport default function Grid({ onClick, world }: Props) {\n  const styles = useMemo(() => getStyles(world.size), [world.size]);\n\n  return (\n    <div style={styles}>\n      {World.mapCells(world, (alive, index) => {\n        return <Block on={alive} onClick={onClick.bind(null, index)} key={`${index}-${alive}`} />;\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number) {\n  return {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: 600,\n    width: 600,\n  };\n}\n","import * as World from './utils/world';\n\nexport type Action = {\n  type: ActionTypes,\n  data?: any,\n}\n\nexport enum ActionTypes {\n  clear,\n  randomize,\n  step,\n  toggleCell,\n  toggleStart,\n}\n\nexport interface State {\n  world: World.Type,\n  playing: boolean,\n}\n\nexport const initialState = {\n  world: World.create(50),\n  playing: false,\n};\n\nexport default function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case ActionTypes.clear:\n      return initialState;\n    case ActionTypes.randomize:\n      return {\n        world: World.randomize(state.world),\n        playing: false,\n      };\n    case ActionTypes.step:\n      return {\n        ...state,\n        world: World.step(state.world),\n      };\n    case ActionTypes.toggleCell:\n      return {\n        world: World.toggleCell(state.world, action.data),\n        playing: false,\n      };\n    case ActionTypes.toggleStart:\n      return {\n        ...state,\n        playing: !state.playing,\n      };\n    default:\n      return state;\n  }\n}\n","import { useCallback, useReducer } from 'react';\nimport reducer, { ActionTypes, initialState } from '../reducer';\nimport useInterval from './useInterval';\n\nexport default function useSimulation(speed: number) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const doClear = useCallback(() => dispatch({ type: ActionTypes.clear }), []);\n  const doRandomize = useCallback(() => dispatch({ type: ActionTypes.randomize }), []);\n  const doStep = useCallback(() => dispatch({ type: ActionTypes.step }), []);\n  const doToggleCell = useCallback((index) => dispatch({ type: ActionTypes.toggleCell, data: index }), []);\n  const doToggleStart = useCallback(() => dispatch({ type: ActionTypes.toggleStart }), []);\n\n  useInterval(doStep, speed, state.playing);\n\n  return {\n    world: state.world,\n    playing: state.playing,\n    doClear,\n    doRandomize,\n    doStep,\n    doToggleCell,\n    doToggleStart,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number, running = true) {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (running) {\n      const id = setInterval(callbackRef.current, delay);\n\n      return () => clearInterval(id);\n    }\n  }, [delay, callbackRef, running]);\n}\n","import React from 'react';\nimport Grid from './Grid';\nimport useSimulation from '../hooks/useSimulation';\n\nconst simulationSpeed = 100; // ms\n\nexport default function App() {\n  const { world, playing, doClear, doRandomize, doStep, doToggleCell, doToggleStart } = useSimulation(simulationSpeed);\n\n  return (\n    <div>\n      <button onClick={doStep}>Step</button>\n      <button onClick={doToggleStart}>{playing ? 'Stop' : 'Play'}</button>\n      <button onClick={doClear}>Clear</button>\n      <button onClick={doRandomize}>Random</button>\n      <Grid onClick={doToggleCell} world={world} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}