{"version":3,"sources":["components/Block.tsx","utils/cell.ts","utils/world.ts","components/Grid.tsx","reducer.ts","hooks/useSimulation.ts","hooks/useInterval.ts","components/App.tsx","index.ts"],"names":["Block","on","onClick","styles","useMemo","backgroundColor","border","getStyles","role","style","create","alive","randomize","world","size","cells","map","Array","Cell","random","mapCells","callback","cell","index","step","x","y","Math","floor","getCoordinatesForIndex","getIndexForCooridinates","getNeighborsForIndex","reduce","acc","getNeighborhood","shouldLive","nextCell","toggleCell","slice","wrapAround","number","output","Grid","columns","display","gridTemplateColumns","height","width","World","bind","key","ActionTypes","initialState","playing","reducer","state","action","type","clear","data","toggleStart","useSimulation","speed","useReducer","dispatch","doClear","useCallback","doRandomize","doStep","doToggleCell","doToggleStart","delay","running","callbackRef","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","simulationSpeed","ReactDOM","render","React","createElement","document","getElementById"],"mappings":"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","file":"static/js/main.02e29767.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  on: boolean,\n  onClick: () => void,\n}\n\nexport default function Block({ on, onClick }: Props) {\n  const styles = useMemo(() => getStyles(on), [on]);\n  return <div onClick={onClick} role=\"button\" style={styles} />;\n}\n\nfunction getStyles(on: boolean) {\n  return {\n    backgroundColor: on ? 'whitesmoke' : 'black',\n    border: '1px solid rebeccapurple',\n  };\n}\n","interface Cell {\n  alive: 0 | 1;\n}\n\nexport type Type = Cell;\n\nexport function create(alive = false): Cell {\n  return {\n    alive: alive ? 1 : 0,\n  };\n}\n\nexport function toggle(cell: Cell): Cell {\n  return {\n    alive: cell.alive ? 0 : 1,\n  };\n}\n","import { map, random } from 'lodash';\nimport * as Cell from './cell';\n\ninterface World {\n  cells: Array<Cell.Type>,\n  size: number,\n}\n\nexport type Type = World;\n\n/**\n * Create a new, empty World.\n */\nexport function create(size: number): World {\n  return {\n    cells: map(new Array(size * size), () => Cell.create()),\n    size,\n  };\n}\n\n/**\n * Randomize the cells of a World. Returns a new World.\n */\nexport function randomize(world: World): World {\n  const { size } = world;\n  return {\n    ...world,\n    cells: map(new Array(size * size), () => Cell.create(!!random(1))),\n  };\n}\n\n/**\n * Execute a callback for every cell in a world, and return an array with the result of each.\n */\nexport function mapCells<T>(world: World, callback: (alive: boolean, index: number) => T) {\n  return world.cells.map((cell, index) => {\n    return callback(!!cell.alive, index);\n  });\n}\n\n/**\n * Return a new world with each cell in their \"next\" state.\n */\nexport function step(world: World): World {\n  return {\n    ...world,\n    cells: mapCells(world, (alive, index) => nextCell(world, alive, index)),\n  };\n}\n\n/**\n * Return a new world with a specific cell toggled.\n */\nexport function toggleCell(world: World, index: number): World {\n  const cells = world.cells.slice();\n  cells[index] = Cell.toggle(cells[index]);\n\n  return {\n    ...world,\n    cells,\n  };\n}\n\nfunction nextCell(world: World, alive: boolean, index: number): Cell.Type {\n  return Cell.create(shouldLive(world, alive, index));\n}\n\nfunction shouldLive(world: World, alive: boolean, index: number): boolean {\n  const liveNeibhbors = getNeighborhood(world, index);\n\n  switch (liveNeibhbors) {\n    case 0:\n    case 1:\n      return false;\n    case 2:\n      return alive;\n    case 3:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getNeighborhood(world: World, index: number): number {\n  return getNeighborsForIndex(world, index).reduce((acc, cell) => acc + cell.alive, 0);\n}\n\nfunction getNeighborsForIndex(world: World, index: number): Array<Cell.Type> {\n  const { x, y } = getCoordinatesForIndex(world, index);\n\n  return [\n    world.cells[getIndexForCooridinates(world, x - 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x, y + 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y + 1)],\n    world.cells[getIndexForCooridinates(world, x - 1, y)],\n    world.cells[getIndexForCooridinates(world, x + 1, y)],\n    world.cells[getIndexForCooridinates(world, x - 1, y - 1)],\n    world.cells[getIndexForCooridinates(world, x, y - 1)],\n    world.cells[getIndexForCooridinates(world, x + 1, y - 1)],\n  ];\n}\n\nfunction getCoordinatesForIndex(world: World, index: number): { x: number, y: number } {\n  return {\n    x: index % world.size,\n    y: Math.floor(index / world.size),\n  };\n}\n\nfunction getIndexForCooridinates(world: World, x: number, y: number): number {\n  return wrapAround(x, world.size) + wrapAround(y, world.size) * world.size;\n}\n\nfunction wrapAround(number: number, size: number): number {\n  let output = number;\n\n  if (output < 0) {\n    output = size - 1;\n  } else if (output >= size) {\n    output = 0;\n  }\n\n  return output;\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as World from '../utils/world';\n\ntype Props = {\n  onClick: (index: number) => void,\n  world: World.Type,\n}\n\nexport default function Grid({ onClick, world }: Props) {\n  const styles = useMemo(() => getStyles(world.size), [world.size]);\n\n  return (\n    <div style={styles}>\n      {World.mapCells(world, (alive, index) => {\n        return <Block on={alive} onClick={onClick.bind(null, index)} key={`${index}-${alive}`} />;\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number) {\n  return {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: 600,\n    width: 600,\n  };\n}\n","import * as World from './utils/world';\n\nexport type Action = {\n  type: ActionTypes,\n  data?: any,\n}\n\nexport enum ActionTypes {\n  clear,\n  randomize,\n  step,\n  toggleCell,\n  toggleStart,\n}\n\nexport interface State {\n  world: World.Type,\n  playing: boolean,\n}\n\nexport const initialState = {\n  world: World.create(50),\n  playing: false,\n};\n\nexport default function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case ActionTypes.clear:\n      return initialState;\n    case ActionTypes.randomize:\n      return {\n        world: World.randomize(state.world),\n        playing: false,\n      };\n    case ActionTypes.step:\n      return {\n        ...state,\n        world: World.step(state.world),\n      };\n    case ActionTypes.toggleCell:\n      return {\n        world: World.toggleCell(state.world, action.data),\n        playing: false,\n      };\n    case ActionTypes.toggleStart:\n      return {\n        ...state,\n        playing: !state.playing,\n      };\n    default:\n      return state;\n  }\n}\n","import { useCallback, useReducer } from 'react';\nimport reducer, { ActionTypes, initialState } from '../reducer';\nimport useInterval from './useInterval';\n\nexport default function useSimulation(speed: number) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const doClear = useCallback(() => dispatch({ type: ActionTypes.clear }), []);\n  const doRandomize = useCallback(() => dispatch({ type: ActionTypes.randomize }), []);\n  const doStep = useCallback(() => dispatch({ type: ActionTypes.step }), []);\n  const doToggleCell = useCallback((index) => dispatch({ type: ActionTypes.toggleCell, data: index }), []);\n  const doToggleStart = useCallback(() => dispatch({ type: ActionTypes.toggleStart }), []);\n\n  useInterval(doStep, speed, state.playing);\n\n  return {\n    world: state.world,\n    playing: state.playing,\n    doClear,\n    doRandomize,\n    doStep,\n    doToggleCell,\n    doToggleStart,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number, running = true) {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (running) {\n      const id = setInterval(callbackRef.current, delay);\n\n      return () => clearInterval(id);\n    }\n  }, [delay, callbackRef, running]);\n}\n","import React from 'react';\nimport Grid from './Grid';\nimport useSimulation from '../hooks/useSimulation';\n\nconst simulationSpeed = 100; // ms\n\nexport default function App() {\n  const { world, playing, doClear, doRandomize, doStep, doToggleCell, doToggleStart } = useSimulation(simulationSpeed);\n\n  return (\n    <div>\n      <button onClick={doStep}>Step</button>\n      <button onClick={doToggleStart}>{playing ? 'Stop' : 'Play'}</button>\n      <button onClick={doClear}>Clear</button>\n      <button onClick={doRandomize}>Random</button>\n      <Grid onClick={doToggleCell} world={world} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}